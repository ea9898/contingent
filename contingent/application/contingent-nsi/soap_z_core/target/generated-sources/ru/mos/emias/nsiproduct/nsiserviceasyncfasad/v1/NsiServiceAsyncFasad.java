package ru.mos.emias.nsiproduct.nsiserviceasyncfasad.v1;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2019-07-01T16:56:32.382+03:00
 * Generated source version: 3.2.7
 *
 */
@WebServiceClient(name = "nsiServiceAsyncFasad",
                  wsdlLocation = "classpath:nsiProduct.nsiServiceAsyncFasad.v1.wsdl",
                  targetNamespace = "http://emias.mos.ru/nsiProduct/nsiServiceAsyncFasad/v1/")
public class NsiServiceAsyncFasad extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://emias.mos.ru/nsiProduct/nsiServiceAsyncFasad/v1/", "nsiServiceAsyncFasad");
    public final static QName NsiServiceAsyncFasadPort = new QName("http://emias.mos.ru/nsiProduct/nsiServiceAsyncFasad/v1/", "nsiServiceAsyncFasadPort");
    static {
        URL url = NsiServiceAsyncFasad.class.getClassLoader().getResource("nsiProduct.nsiServiceAsyncFasad.v1.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(NsiServiceAsyncFasad.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:nsiProduct.nsiServiceAsyncFasad.v1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public NsiServiceAsyncFasad(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public NsiServiceAsyncFasad(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public NsiServiceAsyncFasad() {
        super(WSDL_LOCATION, SERVICE);
    }

    public NsiServiceAsyncFasad(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public NsiServiceAsyncFasad(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public NsiServiceAsyncFasad(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns NsiServiceAsyncFasadPortType
     */
    @WebEndpoint(name = "nsiServiceAsyncFasadPort")
    public NsiServiceAsyncFasadPortType getNsiServiceAsyncFasadPort() {
        return super.getPort(NsiServiceAsyncFasadPort, NsiServiceAsyncFasadPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NsiServiceAsyncFasadPortType
     */
    @WebEndpoint(name = "nsiServiceAsyncFasadPort")
    public NsiServiceAsyncFasadPortType getNsiServiceAsyncFasadPort(WebServiceFeature... features) {
        return super.getPort(NsiServiceAsyncFasadPort, NsiServiceAsyncFasadPortType.class, features);
    }

}
